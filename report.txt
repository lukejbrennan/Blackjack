How user uses blackjack:
In the eyes of the user, the program simulates a game of blackjack. The program starts by telling you what two cards you have and what card the dealer has. Then it asks if you would like to hit or stand. If you chose to hit, the program outputs the card you were dealt and your new score. If the new score exceeded 21, then you lost and the program told you. If you hadn't lost by hitting, then you would be given the option to hit again. Once you choose to stand, cards are dealt to the dealer and their points are displayed. Then, if the dealer went over 21, you have won and the program will let you know that you won and how. If you lost because the dealer had more points, the program will let you know both that you lost and the current scores of the user and the dealer. Lastly, the program will show the record of the dealer vs the user and will ask the user if she wants to play again. If the user types y, then the game restarts; if the user types n, then the program ends.

Internals:
The program begins by initializing a lot of variables. Notably, a CardDeck object is created. Inside the constructor for CardDeck, I used a for loop to transform the elements of the deck from values of 0 to 51 to values from 0 to 12. Then, I assigned 0, 1, and 12 to be equal to 10. This creates a deck of cards based on point values: aces have 11 opints, facecards have 10, and numbers naturally have their value. Then the program enters a while loop that is entered if the game_status is y (for yes). The deck is shuffled, and the game begins. Whenever a card is dealt in the game, the program calls a function (Deal()) which returns the card at the front of the deck and then deletes that card from the deck. This simulates removing and dealing a card. Anytime a card is dealt, I checked the size of the deck. If there were less than 15 elements within the deck, then I created a new deck of cards by deleting the pointer to the old deck, and then creating a new deck in the same memory as the old deck. Here, the constructor was called again to correctly assemble a deck of point values (rather than of cards from 0 to 51). When a new card was dealt, I also added the value of that card to the running sum of points for the user (or the dealer, depending on whose turn it was). Because I added a value to the sum, I also had to make sure that the user's points did not exceed 21. If they did, then I set two variables. One variable (winner) stored who won the game, and the other variable (gameover) stored a 1 to show that the game was now over. Any time in the course of the game, then, that a player had a chance to win the game, I used an if statemnt to ensure that gameover was not yet true. This made sure that only one person won the game once! At the end , I used winner and an if else statement to  increment the count of wins for player and dealer depending on who won the game. 




Verification: To verify the program, I played the game multiple times. At first, my program would tell the user she won or lost but wouldn't give the information that would allow the user to understand why she won or lost. To make this more clear, I added a bunch of print statements that would show who won and why (did the user go over 21 points? did the dealer? Was the dealer's score simply higher than the user's?) I also made sure that the point values for all the cards dealt to both dealer and user were displayed as they would be in a blackjack game. This way, the user was able to count the cards of both the dealer and the user's own score. Lastly, I printed a statement saying that a new deck was being created and the number of cards left in the deck just before the new deck was made. With these statements, I was able to play the game and visually see if the outputs of the program made sense. I tested to make sure the deck was created at an appropriate time (when deck.size was less than 15). I made sure the points added up for player and user and made sure the player with the most points won. I made sure if either player exceeded 21, then that player lost. These were some of the tests that I was able to do with my print functions. 
